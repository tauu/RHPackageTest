(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage[$CommonPackage];


SingFun;



Begin["Private`"];

SetupSingFun[head_]:=Module[{MapToValues},
Values[if_head]:=if//First//Values;
Domain[if_head]:=if//First//Domain;
LeftEndpoint[if_head]:=if//First//LeftEndpoint;
RightEndpoint[if_head]:=if//First//RightEndpoint;
head/:Map[f_,g_head]:=head[f/@Values[g],Domain[g]];

Length[if_head]^:=if//Values//Length;
Points[if_head]:=Points[if//Domain,if//Length];

FastPlus[f__head]:=head[Head[{f}//First//First][Plus@@(Values/@{f}),Domain[{f}//First//First]],{f}//First//Second];

FastTimes[f__head]:=head[Head[{f}//First//First][Times@@(Values/@{f}),Domain[{f}//First//First]],(Second/@{f})//Total];

Plus[f:head[_,{a_,b_}],g:head[_,{a_,b_}]]^:=f~FastPlus~g;

Times[f_head,g_head]^:=f~FastTimes~g;
head/:Times[f_?ConstantQ,g_head]:=head[f First[g],g//Second];
head/:Times[g_head,f_?ConstantQ]:=head[First[g]f,g//Second];
head/:f_head^c_?ConstantQ:=head[First[f]^c,(f//Second) c];

MapToValues[op_]:=(op[if_head]^:=head[op[if//First],if//Second]);
MapToValues/@{Abs,Arg,Re,Im,Conjugate};

NEqual[f_head,g_head]:=Norm[Values[f-g]]<$MachineTolerance;

Dimensions[f_head]^:=f//First//Dimensions;
];

SetupSingFun[SingFun];
SingFun[if_IFun,{\[Alpha]_,\[Beta]_}][x_]:=if[x](MapToInterval[if,x]+1)^\[Alpha] (1-MapToInterval[if,x])^\[Beta];
SingFun[f_,d_?DomainQ,{\[Alpha]_,\[Beta]_}]:=SingFun[(RightEndpoint[d]-LeftEndpoint[d])^(\[Beta]+\[Alpha])/2^(\[Alpha]+\[Beta]) IFun[f,d],{\[Alpha],\[Beta]}];
DCT[sf_SingFun]:=DCT[First[sf]];

DomainIntegrate[SingFun[if_IFun,{-1/2,-1/2}]]:=MapFromIntervalD[Domain[if],0] \[Pi] (if//Mean);

DomainIntegrate[SingFun[if_IFun,{1/2,1/2}]]:=MapFromIntervalD[Domain[if],0]\[Pi]/2if//DCT//ToChebyshevUSeries//First;

NIntegrate[sf_SingFun]^:=DomainIntegrate[sf];

LinePlot[SingFun[f_IFun,{\[Alpha]_,\[Beta]_}],opts:OptionsPattern[]]:=LinePlot[Fun[\!\(\*
TagBox[GridBox[{
{"\[Piecewise]", GridBox[{
{"0", 
RowBox[{
RowBox[{"#", "~", "NEqual", "~", 
RowBox[{"RightEndpoint", "[", "f", "]"}]}], "||", 
RowBox[{"#", "~", "NEqual", "~", 
RowBox[{"LeftEndpoint", "[", "f", "]"}]}]}]},
{
RowBox[{
SuperscriptBox[
RowBox[{"(", 
RowBox[{
RowBox[{"MapToInterval", "[", 
RowBox[{"f", ",", "#"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], " ", 
SuperscriptBox[
RowBox[{"(", 
RowBox[{"1", "-", 
RowBox[{"MapToInterval", "[", 
RowBox[{"f", ",", "#"}], "]"}]}], ")"}], "\[Beta]"]}], "True"}
},
AllowedDimensions->{2, Automatic},
Editable->True,
GridBoxAlignment->{"Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
GridBoxItemSize->{"Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, "RowsIndexed" -> {}},
GridBoxSpacings->{"Columns" -> {Offset[0.27999999999999997`], {Offset[0.84]}, Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {Offset[0.2], {Offset[0.4]}, Offset[0.2]}, "RowsIndexed" -> {}},
Selectable->True]}
},
GridBoxAlignment->{"Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
GridBoxItemSize->{"Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, "RowsIndexed" -> {}},
GridBoxSpacings->{"Columns" -> {Offset[0.27999999999999997`], {Offset[0.35]}, Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {Offset[0.2], {Offset[0.4]}, Offset[0.2]}, "RowsIndexed" -> {}}],
"Piecewise",
DeleteWithContents->True,
Editable->False,
SelectWithContents->True,
Selectable->False]\)&,f//Domain,100] SetLength[f,100],opts];

ReImLinePlot[SingFun[f_IFun,{\[Alpha]_,\[Beta]_}],opts:OptionsPattern[]]:=ReImLinePlot[Fun[\!\(\*
TagBox[GridBox[{
{"\[Piecewise]", GridBox[{
{"0", 
RowBox[{
RowBox[{"#", "~", "NEqual", "~", 
RowBox[{"RightEndpoint", "[", "f", "]"}]}], "||", 
RowBox[{"#", "~", "NEqual", "~", 
RowBox[{"LeftEndpoint", "[", "f", "]"}]}]}]},
{
RowBox[{
SuperscriptBox[
RowBox[{"(", 
RowBox[{
RowBox[{"MapToInterval", "[", 
RowBox[{"f", ",", "#"}], "]"}], "+", "1"}], ")"}], "\[Alpha]"], " ", 
SuperscriptBox[
RowBox[{"(", 
RowBox[{"1", "-", 
RowBox[{"MapToInterval", "[", 
RowBox[{"f", ",", "#"}], "]"}]}], ")"}], "\[Beta]"]}], "True"}
},
AllowedDimensions->{2, Automatic},
Editable->True,
GridBoxAlignment->{"Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
GridBoxItemSize->{"Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, "RowsIndexed" -> {}},
GridBoxSpacings->{"Columns" -> {Offset[0.27999999999999997`], {Offset[0.84]}, Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {Offset[0.2], {Offset[0.4]}, Offset[0.2]}, "RowsIndexed" -> {}},
Selectable->True]}
},
GridBoxAlignment->{"Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
GridBoxItemSize->{"Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, "RowsIndexed" -> {}},
GridBoxSpacings->{"Columns" -> {Offset[0.27999999999999997`], {Offset[0.35]}, Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {Offset[0.2], {Offset[0.4]}, Offset[0.2]}, "RowsIndexed" -> {}}],
"Piecewise",
DeleteWithContents->True,
Editable->False,
SelectWithContents->True,
Selectable->False]\)&,f//Domain,100] SetLength[f,100],opts];

Format[sf:SingFun[_IFun,{_,_}]]:=ReImLinePlot[sf,Sequence@@$FunFormat];

End[];
EndPackage[];
